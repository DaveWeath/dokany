-
  environment:
    CoverityProjectToken:
      secure: 1mtSEr5uFQI5rdwItPXrR1y4fV+SUWt55lUSQB5o3x8=
    CoverityNotificationEmail:
      secure: 0SPcT7MZEWl9NsqpKSOoLBCfqx/KVDAte5+xvbRremg=
    global:
      CYG_ROOT: C:\cygwin
      CYG_MIRROR: http://cygwin.mirror.constant.com
      CYG_CACHE: C:\cygwin\var\cache\setup
      CYG_BASH: C:\cygwin\bin\bash

  os: Visual Studio 2015
  version: 1.0.0-{build}
  configuration:
  - Release
  - Win7 Release
  - Win8 Release
  - Win8.1 Release
  - Win10 Release
  - Coverity
  - WiX
  - Cygwin
  platform:
  - Win32
  - x64
  
  cache:
    - '%CYG_CACHE%'
    
  install:
  - ps: |
      if (!($env:CONFIGURATION -eq "Cygwin") -or !($env:PLATFORM -eq "x64")) {
        return;
      }
  
      'Start-FileDownload "https://cygwin.com/setup-x86.exe" -FileName "setup-x86.exe"'
      & 'setup-x86.exe --quiet-mode --no-shortcuts --no-startmenu --no-desktop --upgrade-also --only-site --root "%CYG_ROOT%" --site "%CYG_MIRROR%" --local-package-dir "%CYG_CACHE%" --packages cmake,make,gcc-core,gcc-g++,mingw-runtime,mingw-binutils,mingw-gcc-core,mingw-gcc-g++,mingw-pthreads,mingw-w32api > NUL 2>&1'
      & '%CYG_BASH% -lc "cygcheck -dc cygwin"'

  build_script:
  - ps: |
      if ($env:CONFIGURATION -eq "Cygwin") {
        return;
      }

      $buildCmd = "C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe"

      if ($env:CONFIGURATION -eq "Coverity") {
        
        if (!($env:PLATFORM -eq "Win32") -or "$env:APPVEYOR_PULL_REQUEST_TITLE" -or !($env:APPVEYOR_REPO_BRANCH -eq 'master')) {
          return;
        }
        
        $buildArgs = @(
        "/m",
        "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
        "/p:Configuration=Win10 Debug",
        "/p:Platform=$env:PLATFORM")
          
        & "cov-build.exe" `
        --dir cov-int `
        --encoding=UTF-8 `
        $buildCmd $buildArgs

        nuget install -ExcludeVersion PublishCoverity
        "Compressing Coverity results..."
        & PublishCoverity\tools\PublishCoverity.exe compress `
        --nologo `
        -i "$env:APPVEYOR_BUILD_FOLDER\cov-int" `
        -o "$env:APPVEYOR_BUILD_FOLDER\coverity.zip" `
        --overwrite
        
         "Uploading Coverity results..."  
        & PublishCoverity\tools\PublishCoverity.exe publish `
        --nologo `
        -t "$env:CoverityProjectToken" `
        -e "$env:CoverityNotificationEmail" `
        -r "dokan-dev/dokany" `
        -z "coverity.zip" `
        -d "Appveyor build." `
        --codeVersion "$env:APPVEYOR_BUILD_VERSION"
      
      } elseif ($env:CONFIGURATION -eq "WiX") {
        
        if (!($env:PLATFORM -eq "Win32") -or "$env:APPVEYOR_PULL_REQUEST_TITLE") {
          return;
        }
        
        $env:Path = $env:Path + ";C:\Program Files (x86)\WiX Toolset v3.10"
        
        & .\build.bat
        cd dokan_wix
        (gc version.xml) -replace 'no', 'yes' | sc version.xml
        
        $Platform = "Mixed Platforms"
        $buildArgs = @(
        "Dokan_WiX.sln",
        "/m",
        "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
        "/p:Configuration=Debug",
        "/p:Platform=${Platform}")
        
        & $buildCmd $buildArgs
      } else {
        $buildArgs = @(
        "/m",
        "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
        "/p:Configuration=$env:CONFIGURATION",
        "/p:Platform=$env:PLATFORM")
        
        & $buildCmd $buildArgs
      }
  - ps: |
      if (!($env:CONFIGURATION -eq "Cygwin") -or !($env:PLATFORM -eq "x64")) {
        return;
      }
      & '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER/dokan_fuse/; exec 0</dev/null;cmake .;make"'
      & '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER/samples/fuse_mirror/; exec 0</dev/null;gcc fusexmp.c -I../../dokan_fuse/include -D_FILE_OFFSET_BITS=64 -L../../dokan_fuse -lcygdokanfuse1"'
